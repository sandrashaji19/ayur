<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Panel</title>
    <link rel="icon" href="/static/ico.ico" type="image/x-icon" />
    <link rel="stylesheet" href="/css/adminstyle.css"
  </head>
  <body>
    <div class="stack-container">
      <div id="doctors" class="container">
        <h2 class="containerHeading">Doctors Table</h2>
        <form
          class="formContainer"
          id="insertDoctorForm"
          enctype="multipart/form-data"
        >
          <div class="formRow">
            <label for="id">Doctor id:</label>
            <input type="number" id="id" name="id" />
          </div>
          <div class="formRow">
            <label for="dname">Doctor Name:</label>
            <input type="text" id="dname" name="dname" required />
          </div>
          <div class="formRow">
            <label for="qualification">Qualification:</label>
            <input
              type="text"
              id="qualification"
              name="qualification"
              required
            />
          </div>
          <div class="formRow">
            <label for="location">Location:</label>
            <input type="text" id="location" name="location" required />
          </div>
          <div class="formRow">
            <label for="contact">Contact:</label>
            <input type="number" id="contact" name="contact" required />
          </div>
          <div class="formRow">
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required />
          </div>
          <div class="formRow">
            <label for="image">Image:</label>
            <input type="file" name="images" required />
          </div>
          <div class="buttonContainer">
            <button
              id="insertbtn"
              type="button"
              onclick="submitInsertData(event)"
            >
              Insert Doctor
            </button>
            <button
              id="updatebtn"
              type="button"
              onclick="submitUpdateData(event)"
            >
              Update Doctor
            </button>
            <button
              id="deletebtn"
              type="button"
              onclick="submitDeleteData(event)"
            >
              Delete Doctor
            </button>
            <button
              id="displaybtn"
              type="button"
              onclick="displayDoctors(event)"
            >
              Doctors List
            </button>
          </div>
        </form>
        <div class="formSwitch" style="padding: 20px">
          <button type="button" onclick="showTreatments()">Treatments</button>
          <button type="button" onclick="showProducts()">Products</button>
          <button type="button" onclick="goHome()">Home</button>
        </div>
      </div>

      <div id="doctorslist" class="container hidden displaycon"></div>

      <div id="treatmentslist" class="container hidden displaycon"></div>

      <div id="treatment" class="container hidden">
        <h2 class="containerHeading">Treatments Table</h2>
        <form
          id="insertTreatmentForm"
          class="formContainer"
          enctype="multipart/form-data"
        >
          <div class="formRow">
            <label for="tname">Treatment ID:</label>
            <input type="number" id="id" name="id" required />
          </div>
          <div class="formRow">
            <label for="tname">Treatment Name:</label>
            <input type="text" id="tname" name="tname" required />
          </div>
          <div class="formRow">
            <label for="prize">Price:</label>
            <input type="number" id="prize" name="prize" required />
          </div>
          <div class="formRow">
            <label for="image">Image:</label>
            <input type="file" name="images" />
          </div>
          <div class="formRow">
            <label for="description">Description Text:</label>
            <textarea
              id="description"
              name="description"
              rows="5"
              cols="30"
              required
            ></textarea>
          </div>
          <div class="buttonContainer">
            <button
              id="treatinsertbtn"
              type="button"
              onclick="submitTreatInsert(event)"
            >
              Insert Treatment
            </button>
            <button
              id="treatupdatebtn"
              type="button"
              onclick="submitTreatUpdate(event)"
            >
              Update Treatment
            </button>
            <button
              id="treatdeletebtn"
              type="submit"
              onclick="submitTreatDelete(event)"
            >
              Delete Treatment
            </button>
            <button
              id="treatdisplaybtn"
              type="button"
              onclick="displayTreatments(event)"
            >
              Treatments List
            </button>
          </div>
          <div class="formSwitch" style="padding: 20px">
            <button type="button" onclick="showDoctors()">Doctors</button>
            <button type="button" onclick="showProducts()">Products</button>
            <button type="button" onclick="goHome()">Home</button>
          </div>
        </form>
      </div>

      <div id="product" class="container hidden">
        <h2 class="containerHeading">Products Table</h2>
        <form
          id="insertProductForm"
          class="formContainer"
          enctype="multipart/form-data"
        >
          <div class="formRow">
            <label for="id">Product ID:</label>
            <input type="number" id="id" name="id" />
          </div>
          <div class="formRow">
            <label for="pname">Product Name:</label>
            <input type="text" id="pname" name="pname" required />
          </div>
          <div class="formRow">
            <label for="prize">Price:</label>
            <input type="number" id="prize" name="prize" required />
          </div>
          <div class="formRow">
            <label for="image">Image:</label>
            <input type="file" name="images" />
          </div>
          <div class="formRow">
            <label for="description">Description:</label>
            <textarea
              id="description"
              name="description"
              rows="5"
              cols="30"
              required
            ></textarea>
          </div>
          <div class="formRow">
            <label for="stock">Stock:</label>
            <input type="number" id="stock" name="stock" required />
          </div>
          <div class="buttonContainer">
            <button
              id="productinsertbtn"
              type="button"
              onclick="submitProductInsert(event)"
            >
              Insert Product
            </button>
            <button type="submit">Delete Product</button>
            <button type="submit">Update Product</button>
          </div>
          <div class="formSwitch" style="padding: 20px">
            <button type="button" onclick="showDoctors()">Doctors</button>
            <button type="button" onclick="showTreatments()">Treatments</button>
            <button type="button" onclick="goHome()">Home</button>
          </div>
        </form>
      </div>
    </div>
  </body>
  <script>
    function showContainer(containerId) {
      const containers = document.querySelectorAll(".container");
      containers.forEach((container) => {
        if (container.id === containerId) {
          container.classList.remove("hidden");
        } else {
          container.classList.add("hidden");
        }
      });
    }

    function showTreatments() {
      showContainer("treatment");
    }

    function showProducts() {
      showContainer("product");
    }

    function showDoctors() {
      showContainer("doctors");
    }

    function goHome() {
      window.location.href = "/home";
    }

    function submitInsertData(event) {
      event.preventDefault();
      var form = document.getElementById("insertDoctorForm");
      const formData = new FormData(form);
      const name = formData.get("dname");
      const qualification = formData.get("qualification");
      const location = formData.get("location");
      const contact = formData.get("contact");
      const email = formData.get("email");
      const img = formData.get("images");

      if (
        name &&
        qualification &&
        location &&
        contact &&
        email &&
        img.name != ""
      ) {
        console.log("Fetching");
        fetch("insertDoctor", {
          method: "POST",
          body: formData,
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              submitbtn = document.getElementById("insertbtn");
              submitbtn.textContent = "Success";
              submitbtn.style.animation = "shake 0.5s ease-in-out";
              submitbtn.style.backgroundColor = "green";
              setTimeout(() => {
                form.reset();
                window.location.reload();
              }, 2000);
            } else {
              alert("Failed to insert row. Refreshing...");
              form.reset();
              window.location.reload();
            }
          });
      } else {
        alert("Please fill all necessary fields");
      }
    }

    function submitUpdateData(event) {
      event.preventDefault();
      var form = document.getElementById("insertDoctorForm");
      const formData = new FormData(form);
      const id = formData.get("id");
      const name = formData.get("dname");
      const qualification = formData.get("qualification");
      const location = formData.get("location");
      const contact = formData.get("contact");
      const email = formData.get("email");
      const img = formData.get("images");
      console.log(formData);

      if (
        id &&
        name &&
        qualification &&
        location &&
        contact &&
        email &&
        img.name != ""
      ) {
        fetch("/updateDoctor", {
          method: "POST",
          body: formData,
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              submitbtn = document.getElementById("updatebtn");
              submitbtn.textContent = "Success";
              submitbtn.style.animation = "shake 0.5s ease-in-out";
              submitbtn.style.backgroundColor = "green";
              setTimeout(() => {
                form.reset();
                window.location.reload();
              }, 2000);
            } else {
              alert(data.message);
              form.reset();
              window.location.reload();
            }
          });
      } else {
        alert("Please fill all necessary fields.");
      }
    }

    function submitDeleteData(event) {
      event.preventDefault();
      var form = document.getElementById("insertDoctorForm");
      const formData = new FormData(form);
      const id = formData.get("id");

      if (id) {
        fetch("/deleteDoctor", {
          method: "POST",
          body: formData,
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              submitbtn = document.getElementById("deletebtn");
              submitbtn.textContent = "Success";
              submitbtn.style.animation = "shake 0.5s ease-in-out";
              submitbtn.style.backgroundColor = "green";
              setTimeout(() => {
                form.reset();
                window.location.reload();
              }, 2000);
            } else {
              alert(data.message);
              form.reset();
              window.location.reload();
            }
          });
      } else {
        alert("Please enter the Doctor ID");
      }
    }

    function displayDoctors(event) {
      event.preventDefault();
      var doccon = document.getElementById("doctors");
      var doclist = document.getElementById("doctorslist");
      doclist.innerHTML = "";

      if (doclist.classList.contains("hidden")) {
        doccon.classList.add("hidden");
        doclist.classList.remove("hidden");

        fetch("/displayList", {
          method: "POST",
          headers: {
            "Content-Type": "application/json", // Specify the content type
          },
          body: JSON.stringify({ choice: "doctors" }),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              const docList = data.data;

              const tablecon = document.createElement("div");
              tablecon.classList.add("tablecon");
              doclist.appendChild(tablecon);
              // Create the table
              const table = document.createElement("table");

              // Create the header row
              const headerRow = document.createElement("tr");
              const headers = [
                "DID",
                "Name",
                "Qualification",
                "Location",
                "Contact",
                "Email",
              ];
              headers.forEach((headerText) => {
                const header = document.createElement("th");
                header.textContent = headerText;
                headerRow.appendChild(header);
              });
              table.appendChild(headerRow);

              // Create the rows for each doctor
              docList.forEach((doctor) => {
                const row = document.createElement("tr");
                const cells = [
                  doctor.did,
                  doctor.dname,
                  doctor.qualification,
                  doctor.location,
                  doctor.contact,
                  doctor.email,
                ];
                cells.forEach((cellText) => {
                  const cell = document.createElement("td");
                  cell.textContent = cellText;
                  row.appendChild(cell);
                });
                table.appendChild(row);
              });

              // Append the table to the document
              tablecon.appendChild(table);

              // Create and append the back button
              const backBtn = document.createElement("button");
              backBtn.id = "displaybtn";
              backBtn.type = "button";
              backBtn.textContent = "Back";
              backBtn.onclick = displayDoctors;
              doclist.appendChild(backBtn);
            } else {
              console.log("Failed to retrieve doctors list");
            }
          });
      } else {
        doclist.classList.add("hidden");
        doccon.classList.remove("hidden");
      }
    }

    function submitTreatInsert(event) {
      event.preventDefault();
      var form = document.getElementById("insertTreatmentForm");
      const formData = new FormData(form);
      const name = formData.get("tname");
      const price = parseInt(formData.get("prize"), 10);
      const desc = formData.get("description");
      const img = formData.get("images");

      if (name && Number.isInteger(price) && desc && img.name != "") {
        console.log("Fetching");
        fetch("insertTreatment", {
          method: "POST",
          body: formData,
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              submitbtn = document.getElementById("treatinsertbtn");
              submitbtn.textContent = "Success";
              submitbtn.style.animation = "shake 0.5s ease-in-out";
              submitbtn.style.backgroundColor = "green";
              setTimeout(() => {
                form.reset();
                window.location.reload();
              }, 2000);
            } else {
              alert("Failed to insert row. Refreshing...");
              form.reset();
              window.location.reload();
            }
          });
      } else {
        alert("Please fill all necessary fields");
      }
    }

    function submitTreatUpdate(event) {
      event.preventDefault();
      var form = document.getElementById("insertTreatmentForm");
      const formData = new FormData(form);
      const id = parseInt(formData.get("id"), 10);
      const name = formData.get("tname");
      const price = parseInt(formData.get("prize"), 10);
      const desc = formData.get("description");
      const img = formData.get("images");

      if (
        Number.isInteger(id) &&
        name &&
        Number.isInteger(price) &&
        desc &&
        img.name != ""
      ) {
        fetch("/updateTreatment", {
          method: "POST",
          body: formData,
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              submitbtn = document.getElementById("treatupdatebtn");
              submitbtn.textContent = "Success";
              submitbtn.style.animation = "shake 0.5s ease-in-out";
              submitbtn.style.backgroundColor = "green";
              setTimeout(() => {
                form.reset();
                window.location.reload();
              }, 2000);
            } else {
              alert(data.message);
              form.reset();
              window.location.reload();
            }
          });
      } else {
        alert("Please fill all necessary fields.");
      }
    }

    function submitTreatDelete(event) {
      event.preventDefault();
      var form = document.getElementById("insertTreatmentForm");
      const formData = new FormData(form);
      const id = parseInt(formData.get("id"), 10);

      if (Number.isInteger(id)) {
        fetch("/deleteTreatment", {
          method: "POST",
          body: formData,
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              submitbtn = document.getElementById("treatdeletebtn");
              submitbtn.textContent = "Success";
              submitbtn.style.animation = "shake 0.5s ease-in-out";
              submitbtn.style.backgroundColor = "green";
              setTimeout(() => {
                form.reset();
                window.location.reload();
              }, 2000);
            } else {
              alert(data.message);
              form.reset();
              window.location.reload();
            }
          });
      } else {
        alert("Please enter the Treatment ID");
      }
    }

    function displayTreatments(event) {
      event.preventDefault();
      var treatcon = document.getElementById("treatment");
      var treatlist = document.getElementById("treatmentslist");
      treatlist.innerHTML = "";

      if (treatlist.classList.contains("hidden")) {
        treatcon.classList.add("hidden");
        treatlist.classList.remove("hidden");

        fetch("/displayList", {
          method: "POST",
          headers: {
            "Content-Type": "application/json", // Specify the content type
          },
          body: JSON.stringify({ choice: "treatment" }),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              const treatList = data.data;

              const tablecon = document.createElement("div");
              tablecon.classList.add("tablecon");
              treatlist.appendChild(tablecon);
              // Create the table
              const table = document.createElement("table");

              // Create the header row
              const headerRow = document.createElement("tr");
              const headers = ["TID", "Name", "Price", "Description"];
              headers.forEach((headerText) => {
                const header = document.createElement("th");
                header.textContent = headerText;
                headerRow.appendChild(header);
              });
              table.appendChild(headerRow);

              // Create the rows for each doctor
              treatList.forEach((treatment) => {
                const row = document.createElement("tr");
                const cells = [
                  treatment.tid,
                  treatment.tname,
                  treatment.prize,
                  treatment.description,
                ];
                cells.forEach((cellText) => {
                  const cell = document.createElement("td");
                  cell.textContent = cellText;
                  row.appendChild(cell);
                });
                table.appendChild(row);
              });

              // Append the table to the document
              tablecon.appendChild(table);

              // Create and append the back button
              const backBtn = document.createElement("button");
              backBtn.id = "treatbtn";
              backBtn.type = "button";
              backBtn.textContent = "Back";
              backBtn.onclick = displayTreatments;
              treatlist.appendChild(backBtn);
            } else {
              console.log("Failed to retrieve treatments list");
            }
          });
      } else {
        treatlist.classList.add("hidden");
        treatcon.classList.remove("hidden");
      }
    }

    function submitProductInsert(event) {
      event.preventDefault();
      var form = document.getElementById("insertProductForm");
      const formData = new FormData(form);
      const name = formData.get("pname");
      const price = parseInt(formData.get("prize"), 10);
      const img = formData.get("images");
      const description = formData.get("description");
      const stock = parseInt(formData.get("stock"));

      if (
        name &&
        Number.isInteger(price) &&
        description &&
        Number.isInteger(stock) &&
        img.name != ""
      ) {
        console.log("Fetching");
        fetch("insertProduct", {
          method: "POST",
          body: formData,
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              submitbtn = document.getElementById("productinsertbtn");
              submitbtn.textContent = "Success";
              submitbtn.style.animation = "shake 0.5s ease-in-out";
              submitbtn.style.backgroundColor = "green";
              setTimeout(() => {
                form.reset();
                window.location.reload();
              }, 2000);
            } else {
              alert("Failed to insert row. Refreshing...");
              form.reset();
              window.location.reload();
            }
          });
      } else {
        alert("Please fill all necessary fields");
      }
    }
  </script>
</html>
